{
  "hash": "73e39210cf8d24f29448498b7b170dbe",
  "result": {
    "markdown": "# Apuntes de clase {-}\n\n## Decision Trees \n\n- Sirven para predicción **numérica** (*regresión*) y **categórica** (*clasificación*).\n- Es un modelo **muy fácil de interpretar**, útil para **inferencia**.\n- Este modelo tiene **alta variabilidad** (válido para todo modelo de árboles).\n- Es **tan flexible**, que fácilmente produce **sobreajustes**.\n\n- Es un modelo **escalable**.\n\n- Este modelo no genera *directamente* la **probabilidad** de pertenencia a una \nclase, sino la clasificación en sí. \n    - Aún así, se puede **estimar la probabilidad**\n    de pertenencia a una clase $K$ , contando la proporción de observaciones (de la muestra)\n    que fue clasificada como clase $K$ .\n    - Sin embargo, cualquier observación pertenciente al **mismo nodo**\n    posee la misma probabilidad **estimada** de pertenencia a una clase.\n    - Por ello, la **curva ROC** de este modelo es **muy poligonal** ...\n    no funciona tan bien.\n\n\n### Partes de un Árbol de Decisión\n\n- **Nodo interno (root node)**: Denota una prueba sobre un atributo.\n- **Rama (branch)**: Corresponde a un *valor* de atributo; representa el resultado de una prueba.\n- **Nodo terminal (leaf node)**: Representa una *etiqueta* de clase.\n\n- Cada camino es una conjunción de valores de atributos.\n\n\n### Construcción de un Árbol de Decisión\n\n- Existen **diversos** *tree induction algorithms*, los cuales\npueden generar árboles de decisión **muy diferentes**.\n\n\n## Características de Decision Trees\n\n- Este modelo se puede *construir rápidamente*.\n- **No requiere que las variables sean independientes**.\n- Permite evaluar qué **variables son importantes**\ny cómo interactúan ente ellos.\n- Es **robusto a outliers**.\n- Funciona bien incluso cuando hay **variables faltantes en observaciones** (datos perdidos).\n\n- Las variables se discretizan al momemto de generar\nel árbol de decisión. Esto se evidencia para predictores\nnuméricos, pues, nodo por nodo, se discretizan en dos categorías/regiones vía un **punto de corte**.\n\n\n## Inducción en Decision Trees\n\n- **Construcción** del árbol:\n    - A la hora de fijar un punto de **corte**, podemos calcular la entropía asociada\n    a las nuevas regiones creadas, teniendo en cuenta que **entropía igual a cero**\n    maximiza la probabilidad de realizar una buena clasificación.\n- **Poda** del árbol: Identificar y remover ramas que causen ruido o tengan outliers.\n\n- El que se divida una región en **dos subregiones** no depende de si la variable\nes numérica o categórica, sino del **algoritmo de inducción empleado**.\n\n### Construcción\n\n### Múltiples árboles de decisión\n\n### Inducción\n\n\n## Medidas de Impureza\n\n- Coeficiente de Gini\n- Entropía\n\n- **Mayor valor** de estas medidas, implica **mayor impureza del nodo terminal**.\n- A mayor impureza, sería más difícil saber a que categoría pertenece una observación\npresente en un nodo terminal.\n\n- **Coeficiente de Gini** asociado a una partición que produce nodos terminales\nes el **promedio ponderado** de los coeficientes de Gini de aquellos nodos terminales,\ndonde la ponderación es respecto al número de observaciones en cada nodo terminal.\n\n- Nodos con medida de impureza igual a cero no se dividen más, pues no es necesario.\n\n\n## Ejemplo práctico\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'rpart' was built under R version 4.1.3\n```\n:::\n:::\n\n\n- `minsplit`:\n    - Minimum number of observations in a node para que sea dividido.\n    - Default value: 20\n    - Suele no ser necesario alterar si se cuenta con **muchos datos**.\n\n- `minbucket`:\n    - Minimum number of observations in any terminal/leaf node.\n    - Default value: `minsplit / 3`\n\n- `cp`:\n    - **Parámetro de complejidad**\n    - **Valor más común por modificar** al usar el modelo Decision Tree.\n    - Indica que, si el criterio de impureza **no es reducido** \n    (**restando** las métricas de complejidad (no quotient)) en\n    más de `cp` (**respecto al nivel anterior**) entonces, **se para**.\n    - Default value: `cp = 0.01`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbupa <- read.table(\"../datos/bupa.txt\", header = TRUE, sep = \",\") \nhead(bupa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3 V4 V5 V6 V7\n1 85 92 45 27 31  0  1\n2 85 64 59 32 23  0  2\n3 86 54 33 16 54  0  2\n4 91 78 34 24 36  0  2\n5 87 70 12 28 10  0  2\n6 98 55 13 17 17  0  2\n```\n:::\n\n```{.r .cell-code}\n# Declarar V7 como un factor\nbupa[,7] <- as.factor(bupa[,7])\n```\n:::\n\n\n\n### Ejemplo 1\n\n- Consideramos: \n    - `minbucket = 50` \n    - `minsplit = 150`\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimar el árbol\narbol1 <- rpart(\n  V7 ~ V3 + V5, data = bupa, method = \"class\", minbucket = 50\n)\narbol1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 345 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 345 145 2 (0.4202899 0.5797101)  \n  2) V5< 20.5 140  61 1 (0.5642857 0.4357143) *\n  3) V5>=20.5 205  66 2 (0.3219512 0.6780488) *\n```\n:::\n:::\n\n\n- **Interpretación**:\n    - 61 **predicciones incorrectas**, de un total de 140 observaciones, en el nodo terminal asociado a `V5 < 20.5`.\n    - 66 **predicciones incorrectas**, de un total de 205 observaciones, en el nodo terminal asociado a `V5 < 20.5`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Graficando el arbol\nplot(arbol1, margin = 0.25)\ntext(arbol1, use.n = TRUE)\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mejoramos los gráficos\nlibrary(partykit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'partykit' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: grid\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: libcoin\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'libcoin' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: mvtnorm\n```\n:::\n\n```{.r .cell-code}\nplot(partykit::as.party(arbol1), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Ejemplo 2\n\nFijamos `minbucket = 20 (minsplit = 60)` para obtener un árbol con más ramas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol2 <- rpart(\n  V7 ~ V3 + V5, data = bupa, method = \"class\", minbucket = 20\n)\nplot(as.party(arbol2), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Ejemplo 3\n\nFijamos `cp = 0.05`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol3 <- rpart(\n  V7 ~ V3 + V5, data = bupa, method = \"class\", cp = 0.05\n)\nplot(as.party(arbol3), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Ejemplo 4\n\nFijamos `cp = 0.001` para obtener un árbol con más ramas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol4 <- rpart(\n  V7 ~ V3 + V5, data = bupa, method = \"class\", cp = 0.001\n)\nplot(as.party(arbol4), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Ejemplo 5\n\nFijamos `maxdepth = 3`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol5 <- rpart(\n  V7 ~ V3 + V5, data = bupa, method = \"class\", maxdepth = 3\n)\nplot(as.party(arbol5), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Ejemplo 6: Podar el árbol\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(060717)\n# A propósito dejamos crecer mucho el árbol, fijando\n# un valor vajo de cp .\narbol <- rpart(\n  V7~ V3 + V5, data = bupa, method = \"class\", cp = 0.001\n)\n\n# Fijar un criterio para podar el árbol\narbol6 <- rpart::prune(arbol, cp = 0.1)\n\nplot(as.party(arbol), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(as.party(arbol6), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n#### Usamos validación estándar con cp como hiperparámetro\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Elección del modelo con métrica menor (error) o mejor (accuracy, por ejemplo)\nrpart::printcp(arbol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nClassification tree:\nrpart(formula = V7 ~ V3 + V5, data = bupa, method = \"class\", \n    cp = 0.001)\n\nVariables actually used in tree construction:\n[1] V3 V5\n\nRoot node error: 145/345 = 0.42029\n\nn= 345 \n\n         CP nsplit rel error  xerror     xstd\n1 0.1379310      0   1.00000 1.00000 0.063230\n2 0.0206897      2   0.72414 0.75862 0.059697\n3 0.0137931      6   0.63448 0.75172 0.059551\n4 0.0114943      7   0.62069 0.78621 0.060253\n5 0.0068966     10   0.58621 0.77241 0.059980\n6 0.0034483     12   0.57241 0.82069 0.060891\n7 0.0010000     16   0.55862 0.87586 0.061781\n```\n:::\n:::\n\n\nLa columna `rel error` (relative error) no nos sirve, pues esos valores\nsiempre están decreciendo, ya que la impureza siempre diminuye para\nniveles más altos del árbol.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Elección del modelo vía la regla del error estándar\nrpart::plotcp(arbol)\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nEn el eje X están las medias geométricas, de dos en dos, de valores de CP\nen la tabla mostrada previamente.\n\n### Usando el criterio del Min xerror\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol7 <- prune(arbol, cp = 0.0137931)\nplot(as.party(arbol7), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Usando el criterio de +-xstd\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol7 <- prune(arbol, cp = 0.053)\nplot(as.party(arbol7), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Automatizando la selección del Valor óptimo de CP (criterio Min xerror)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narbol.completo <- rpart(\n  V7 ~ ., data = bupa, method = \"class\", cp = 0, minbucket = 1\n)\narbol.completo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 345 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n  1) root 345 145 2 (0.42028986 0.57971014)  \n    2) V5< 20.5 140  61 1 (0.56428571 0.43571429)  \n      4) V3>=19.5 80  20 1 (0.75000000 0.25000000)  \n        8) V4< 21.5 43   5 1 (0.88372093 0.11627907)  \n         16) V6< 3.5 35   2 1 (0.94285714 0.05714286)  \n           32) V1>=85.5 31   0 1 (1.00000000 0.00000000) *\n           33) V1< 85.5 4   2 1 (0.50000000 0.50000000)  \n             66) V1< 83.5 2   0 1 (1.00000000 0.00000000) *\n             67) V1>=83.5 2   0 2 (0.00000000 1.00000000) *\n         17) V6>=3.5 8   3 1 (0.62500000 0.37500000)  \n           34) V3>=23.5 5   0 1 (1.00000000 0.00000000) *\n           35) V3< 23.5 3   0 2 (0.00000000 1.00000000) *\n        9) V4>=21.5 37  15 1 (0.59459459 0.40540541)  \n         18) V1>=88.5 22   5 1 (0.77272727 0.22727273)  \n           36) V4>=24.5 14   1 1 (0.92857143 0.07142857) *\n           37) V4< 24.5 8   4 1 (0.50000000 0.50000000)  \n             74) V6>=5 2   0 1 (1.00000000 0.00000000) *\n             75) V6< 5 6   2 2 (0.33333333 0.66666667)  \n              150) V2>=63.5 3   1 1 (0.66666667 0.33333333)  \n                300) V2< 74 2   0 1 (1.00000000 0.00000000) *\n                301) V2>=74 1   0 2 (0.00000000 1.00000000) *\n              151) V2< 63.5 3   0 2 (0.00000000 1.00000000) *\n         19) V1< 88.5 15   5 2 (0.33333333 0.66666667)  \n           38) V3>=29.5 3   0 1 (1.00000000 0.00000000) *\n           39) V3< 29.5 12   2 2 (0.16666667 0.83333333)  \n             78) V2>=81.5 1   0 1 (1.00000000 0.00000000) *\n             79) V2< 81.5 11   1 2 (0.09090909 0.90909091) *\n      5) V3< 19.5 60  19 2 (0.31666667 0.68333333)  \n       10) V2>=77 16   5 1 (0.68750000 0.31250000)  \n         20) V1>=88.5 12   2 1 (0.83333333 0.16666667)  \n           40) V2< 125 11   1 1 (0.90909091 0.09090909)  \n             80) V1>=89.5 8   0 1 (1.00000000 0.00000000) *\n             81) V1< 89.5 3   1 1 (0.66666667 0.33333333)  \n              162) V3< 17.5 2   0 1 (1.00000000 0.00000000) *\n              163) V3>=17.5 1   0 2 (0.00000000 1.00000000) *\n           41) V2>=125 1   0 2 (0.00000000 1.00000000) *\n         21) V1< 88.5 4   1 2 (0.25000000 0.75000000)  \n           42) V1< 85.5 1   0 1 (1.00000000 0.00000000) *\n           43) V1>=85.5 3   0 2 (0.00000000 1.00000000) *\n       11) V2< 77 44   8 2 (0.18181818 0.81818182)  \n         22) V4< 14.5 6   2 1 (0.66666667 0.33333333)  \n           44) V1>=91.5 3   0 1 (1.00000000 0.00000000) *\n           45) V1< 91.5 3   1 2 (0.33333333 0.66666667)  \n             90) V2>=60 1   0 1 (1.00000000 0.00000000) *\n             91) V2< 60 2   0 2 (0.00000000 1.00000000) *\n         23) V4>=14.5 38   4 2 (0.10526316 0.89473684)  \n           46) V6< 3.5 23   4 2 (0.17391304 0.82608696)  \n             92) V5>=18.5 1   0 1 (1.00000000 0.00000000) *\n             93) V5< 18.5 22   3 2 (0.13636364 0.86363636)  \n              186) V6>=2.5 1   0 1 (1.00000000 0.00000000) *\n              187) V6< 2.5 21   2 2 (0.09523810 0.90476190)  \n                374) V5>=14.5 8   2 2 (0.25000000 0.75000000)  \n                  748) V5< 15.5 2   0 1 (1.00000000 0.00000000) *\n                  749) V5>=15.5 6   0 2 (0.00000000 1.00000000) *\n                375) V5< 14.5 13   0 2 (0.00000000 1.00000000) *\n           47) V6>=3.5 15   0 2 (0.00000000 1.00000000) *\n    3) V5>=20.5 205  66 2 (0.32195122 0.67804878)  \n      6) V6>=5.5 69  33 2 (0.47826087 0.52173913)  \n       12) V3>=35.5 35  12 1 (0.65714286 0.34285714)  \n         24) V4< 42.5 25   5 1 (0.80000000 0.20000000)  \n           48) V2< 86.5 19   1 1 (0.94736842 0.05263158)  \n             96) V1>=84.5 18   0 1 (1.00000000 0.00000000) *\n             97) V1< 84.5 1   0 2 (0.00000000 1.00000000) *\n           49) V2>=86.5 6   2 2 (0.33333333 0.66666667)  \n             98) V2>=123 1   0 1 (1.00000000 0.00000000) *\n             99) V2< 123 5   1 2 (0.20000000 0.80000000)  \n              198) V3>=57.5 1   0 1 (1.00000000 0.00000000) *\n              199) V3< 57.5 4   0 2 (0.00000000 1.00000000) *\n         25) V4>=42.5 10   3 2 (0.30000000 0.70000000)  \n           50) V1>=96.5 3   0 1 (1.00000000 0.00000000) *\n           51) V1< 96.5 7   0 2 (0.00000000 1.00000000) *\n       13) V3< 35.5 34  10 2 (0.29411765 0.70588235)  \n         26) V4< 22.5 10   4 1 (0.60000000 0.40000000)  \n           52) V2< 75.5 6   1 1 (0.83333333 0.16666667) *\n           53) V2>=75.5 4   1 2 (0.25000000 0.75000000)  \n            106) V1< 85 1   0 1 (1.00000000 0.00000000) *\n            107) V1>=85 3   0 2 (0.00000000 1.00000000) *\n         27) V4>=22.5 24   4 2 (0.16666667 0.83333333)  \n           54) V2>=92.5 6   3 1 (0.50000000 0.50000000)  \n            108) V1>=91.5 4   1 1 (0.75000000 0.25000000)  \n              216) V3>=21.5 3   0 1 (1.00000000 0.00000000) *\n              217) V3< 21.5 1   0 2 (0.00000000 1.00000000) *\n            109) V1< 91.5 2   0 2 (0.00000000 1.00000000) *\n           55) V2< 92.5 18   1 2 (0.05555556 0.94444444) *\n      7) V6< 5.5 136  33 2 (0.24264706 0.75735294)  \n       14) V2>=65.5 75  26 2 (0.34666667 0.65333333)  \n         28) V4< 24.5 41  20 1 (0.51219512 0.48780488)  \n           56) V6< 2.5 27   9 1 (0.66666667 0.33333333)  \n            112) V5< 29.5 11   1 1 (0.90909091 0.09090909) *\n            113) V5>=29.5 16   8 1 (0.50000000 0.50000000)  \n              226) V1>=87.5 10   3 1 (0.70000000 0.30000000)  \n                452) V1< 92.5 8   1 1 (0.87500000 0.12500000)  \n                  904) V6>=0.25 7   0 1 (1.00000000 0.00000000) *\n                  905) V6< 0.25 1   0 2 (0.00000000 1.00000000) *\n                453) V1>=92.5 2   0 2 (0.00000000 1.00000000) *\n              227) V1< 87.5 6   1 2 (0.16666667 0.83333333)  \n                454) V1< 80.5 1   0 1 (1.00000000 0.00000000) *\n                455) V1>=80.5 5   0 2 (0.00000000 1.00000000) *\n           57) V6>=2.5 14   3 2 (0.21428571 0.78571429)  \n            114) V2< 69 2   0 1 (1.00000000 0.00000000) *\n            115) V2>=69 12   1 2 (0.08333333 0.91666667) *\n         29) V4>=24.5 34   5 2 (0.14705882 0.85294118)  \n           58) V3>=39 15   5 2 (0.33333333 0.66666667)  \n            116) V3< 45.5 6   2 1 (0.66666667 0.33333333)  \n              232) V5< 106 5   1 1 (0.80000000 0.20000000) *\n              233) V5>=106 1   0 2 (0.00000000 1.00000000) *\n            117) V3>=45.5 9   1 2 (0.11111111 0.88888889)  \n              234) V1< 85 3   1 2 (0.33333333 0.66666667)  \n                468) V5>=70.5 1   0 1 (1.00000000 0.00000000) *\n                469) V5< 70.5 2   0 2 (0.00000000 1.00000000) *\n              235) V1>=85 6   0 2 (0.00000000 1.00000000) *\n           59) V3< 39 19   0 2 (0.00000000 1.00000000) *\n       15) V2< 65.5 61   7 2 (0.11475410 0.88524590)  \n         30) V5>=26.5 42   7 2 (0.16666667 0.83333333)  \n           60) V5< 35.5 15   5 2 (0.33333333 0.66666667)  \n            120) V6>=0.75 10   5 1 (0.50000000 0.50000000)  \n              240) V1>=89 5   1 1 (0.80000000 0.20000000)  \n                480) V2>=50 4   0 1 (1.00000000 0.00000000) *\n                481) V2< 50 1   0 2 (0.00000000 1.00000000) *\n              241) V1< 89 5   1 2 (0.20000000 0.80000000)  \n                482) V1< 83 1   0 1 (1.00000000 0.00000000) *\n                483) V1>=83 4   0 2 (0.00000000 1.00000000) *\n            121) V6< 0.75 5   0 2 (0.00000000 1.00000000) *\n           61) V5>=35.5 27   2 2 (0.07407407 0.92592593)  \n            122) V4< 23.5 11   2 2 (0.18181818 0.81818182)  \n              244) V4>=22.5 3   1 1 (0.66666667 0.33333333)  \n                488) V1< 92.5 2   0 1 (1.00000000 0.00000000) *\n                489) V1>=92.5 1   0 2 (0.00000000 1.00000000) *\n              245) V4< 22.5 8   0 2 (0.00000000 1.00000000) *\n            123) V4>=23.5 16   0 2 (0.00000000 1.00000000) *\n         31) V5< 26.5 19   0 2 (0.00000000 1.00000000) *\n```\n:::\n\n```{.r .cell-code}\nxerr <- arbol.completo$cptable[,\"xerror\"]\nminxerr <- which.min(xerr)\nmincp <- arbol.completo$cptable[minxerr, \"CP\"]\narbol.prune <- prune(arbol.completo, cp = mincp)\nplot(as.party(arbol.prune), tp_args = list(id = FALSE))\n```\n\n::: {.cell-output-display}\n![](clase-09_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predicción usando el árbol podado\n# Calcular los valores predichos\npred <- predict(arbol.prune, bupa[,c(-7)], type = \"class\")\n\n# Calcular la matriz de confusión\ncaret::confusionMatrix(pred, bupa$V7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   1   2\n         1  60  20\n         2  85 180\n                                          \n               Accuracy : 0.6957          \n                 95% CI : (0.6441, 0.7438)\n    No Information Rate : 0.5797          \n    P-Value [Acc > NIR] : 5.902e-06       \n                                          \n                  Kappa : 0.3344          \n                                          \n Mcnemar's Test P-Value : 4.217e-10       \n                                          \n            Sensitivity : 0.4138          \n            Specificity : 0.9000          \n         Pos Pred Value : 0.7500          \n         Neg Pred Value : 0.6792          \n             Prevalence : 0.4203          \n         Detection Rate : 0.1739          \n   Detection Prevalence : 0.2319          \n      Balanced Accuracy : 0.6569          \n                                          \n       'Positive' Class : 1               \n                                          \n```\n:::\n:::\n",
    "supporting": [
      "clase-09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}